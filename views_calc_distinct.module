<?php
/**
 * @file
 * Views Calc Distinct module.
 */


/**
* Implements hook_permission
*/
function views_calc_distinct_permission(){
  return array(
    'administer views calc distinct' => array(
      'title' => t('Administer views calc distinct'),
    ),
  );
} 

/**
* Implements hook_menu
*/ 
function views_calc_distinct_menu() {
  $items = array();

  $items['admin/structure/views/views_calc_distinct'] = array(
    'title' => 'Views calc distinct',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('views_calc_distinct_admin_form'),    
    'access arguments' => array('administer views calc distinct'),
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}
 
/**
* Administration form
*/ 
function views_calc_distinct_admin_form($form, &$form_state) {
  $form = array();
  $config = config('views_calc_distinct.settings');
  $form['#config'] = 'views_calc_distinct.settings';
  
  $form['views_calc_distinct_process_all_views_calc_displays'] = array(
    '#title' => t('Process all views calc displays'),
    '#type' => 'checkbox',
    '#default_value' => $config->get('views_calc_distinct_process_all_views_calc_displays'),
  );
  
  return system_settings_form($form);
}
 
/**
 * Implements hook_views_pre_render().
 */
function views_calc_distinct_views_pre_render(&$view){

  $process_all = config_get('views_calc_distinct.settings', 'views_calc_distinct_process_all_views_calc_displays');

  if ((($view->style_plugin->plugin_name == 'views_calc_distinct' && $view->style_plugin->options['views_calc_distinct']) || ($process_all)) &&
    !empty($view->query->distinct)) {
    $subresults = array();
    $results = array();
    $subcalc = FALSE;

    if (isset($view->sub_totals) && count($view->sub_totals)) {
      $subresults = $view->result;
      // Get all results.
      $summary_view = views_get_view($view->name);
      $summary_view->set_display($view->current_display);
      $summary_view->exposed_input = $view->exposed_input;
      $summary_view->exposed_data = $view->exposed_data;
      $summary_view->pre_execute($view->args);
      $summary_view->set_items_per_page(0);
      $summary_view->execute();
      $summary_view->post_execute();
      $results = $summary_view->result;

      $subcalc = TRUE;
    }
    else {
      $results = $view->result;
    }

    if (isset($view->views_calc_fields)) {
      foreach ($view->views_calc_fields as $operation => $fields) {
        foreach ($fields as $key => $field) {
          $value = views_calc_distinct_calculate_value($field, $operation, $results, $view);

          views_calc_distinct_set_value($view, $field, $operation, $value, $view->totals);
          // Calculate subtotals.
          if ($subcalc) {            
            $value = views_calc_distinct_calculate_value($field, $operation, $subresults, $view);
            views_calc_distinct_set_value($view, $field, $operation, $value, $view->sub_totals);
          }
        }
      }
    }
    else {
      $view->totals = array();
    }
  }
}

/**
 * Helper function calculate and set value.
 */
function views_calc_distinct_calculate_value($field, $operation, $results, $view) {
  $value = 0;

  // Get the right name of the view.
  if (empty($view->field[$field]->base_table)) {
    // This seems to be a property.
    $field_name = $view->field[$field]->field_alias;
  } else {
    // This seems to be a field.
    $field_name = 'field_'.$field;
  }
  
  switch ($operation) {
    case 'SUM':
      $value = views_calc_distinct_calculate_sum($results, $field_name);
      break;

    case 'COUNT':
      $value = views_calc_distinct_calculate_count($results, $field_name);
      break;

    case 'AVG':
      $value = views_calc_distinct_calculate_avg($results, $field_name);
      break;
  }

  return $value;
}

/**
 * Helper function set field value.
 */
function views_calc_distinct_set_value($view, $field, $operation, $value, $total) {
  $field = $view->field[$field];
  $query_alias = '';

  if (isset($field->aliases['entity_type'])) {
    $query_alias = $field->aliases['entity_type'];
  }
  else {
    $query_alias = $field->field_alias;
  }

  if (empty($query_alias)) {
    return FALSE;
  }

  $alias = strtolower($operation) . '__' . $query_alias;  
  
  // Limit the alias to 60 characters. 
  // @see https://api.drupal.org/api/views/plugins!views_plugin_query_default.inc/function/views_plugin_query_default%3A%3Aadd_field/7
  $alias = strtolower(substr($alias, 0, 60));
  
  $total->{$alias} = $value;
}

/**
 * Implements hook_views_api().
 */
function views_calc_distinct_views_api() {
  return array(
    'api' => 3,
    'path' => backdrop_get_path('module', 'views_calc_distinct'),
  );
}

/**
 * Helper function calculate SUM.
 */
function views_calc_distinct_calculate_sum($results, $field) {
  $sum = 0;
  $keys = array(0, 'raw', 'value');

  foreach ($results as $result) {
    $value = $result->{$field};
    if (is_array($value)) {
      $sum += backdrop_array_get_nested_value($value, $keys);
    } else {
      $sum += $value;
    }
  }

  return $sum;
}

/**
 * Helper function calculate AVG.
 */
function views_calc_distinct_calculate_avg($results, $field) {
  $results = views_calc_distinct_calculate_sum($results, $field);

  return $results / count($results);
}

/**
 * Helper function calculate COUNT.
 */
function views_calc_distinct_calculate_count($results, $field) {
  $count = 0;
  $keys = array(0, 'raw', 'value');

  foreach ($results as $result) {
    $value = backdrop_array_get_nested_value($result->{$field}, $keys);

    if ($value) {
      $count++;
    }
  }

  return $count;
}

/**
 * Implements views_calc_distinct_autoload_info().
 */
function views_calc_distinct_autoload_info() {
  return array(
    'views_calc_distinct_plugin_style_table' => 'views_calc_distinct_plugin_style_table.inc',
  );
}
